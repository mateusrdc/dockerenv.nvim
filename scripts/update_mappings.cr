require "json"
require "http/client"
require "json"
require "compress/zip"

class Package
  include JSON::Serializable
  property name : String
  property languages : Array(String)
  property categories : Array(String)
  property source : PackageSource
  @[JSON::Field(key: "bin", converter: MapToArrayConverter)]
  property binaries : Array(String)?
end

class PackageSource
  include JSON::Serializable

  property id : String
end

class MapToArrayConverter
  def self.from_json(j : JSON::PullParser)
    map = Hash(String, String).from_json(j.read_raw)

    return map.keys
  end
end

# Fetch mappings
response = HTTP::Client.get "https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/refs/heads/main/doc/mason-lspconfig-mapping.txt"
mappings = parse_mappings(response.body)

# Fetch registry
response = HTTP::Client.get "https://api.github.com/repos/mason-org/mason-registry/releases/latest"
latest_release = JSON.parse response.body
asset = latest_release["assets"].as_a.find { |entry| entry["name"] == "registry.json.zip" }

if asset.nil?
  puts "updater: error finding registry.json.zip in mason-registry' latest release."
  exit
end

get_but_follow_redirects asset["browser_download_url"].as_s do |response|
  Compress::Zip::Reader.open(response.body_io) do |zip|
    zip.each_entry do |entry|
      if entry.filename == "registry.json"
        process_registry entry.io, mappings
        break
      end
    end
  end
end

def process_registry(registry : IO, mappings : Hash(String, String))
  # content = registry.gets_to_end
  entries = Array(Package).from_json(registry)

  File.open "mappings.lua", mode: "w" do |file|
    file.puts "-- Auto generated by scripts/update_mappings.cr\n\n"
    file.puts "local binaryToLspConfigKey = {"

    entries.each do |entry|
      lspconfig_name = mappings[entry.name]?

      if lspconfig_name.nil? || entry.binaries.nil? || entry.binaries.not_nil!.empty?
        next
      end

      # Only map the first binary, should work
      file.puts %|\t["#{entry.binaries.not_nil!.first}"] = "#{lspconfig_name}",|
    end

    file.puts "}"
    file.puts "\nreturn binaryToLspConfigKey"
  end
end

def parse_mappings(body : String) : Hash(String, String)
  reached_mappings = false
  result = Hash(String, String).new

  body.lines.each do |line|
    if line.strip.empty?
      if reached_mappings
        break
      else
        next
      end
    end

    if line.starts_with? %|`Mason name`|
      reached_mappings = true
      next
    end

    if reached_mappings 
      space_index = line.index " "

      if space_index.nil?
        next 
      end

      mason_name = line[0...space_index]
      lspconfig_name = line[space_index..].strip

      result[mason_name] = lspconfig_name
    end
  end

  return result
end

private def get_but_follow_redirects(url : String, &)
  target_url = url

  while true
    HTTP::Client.get target_url do |response|
      if response.status_code == 301 || response.status_code == 302
        target_url = response.headers["Location"]
      else
        yield response
        return
      end
    end
  end
end
